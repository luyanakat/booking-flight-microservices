// Code generated by ent, DO NOT EDIT.

package flight

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the flight type in the database.
	Label = "flight"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFrom holds the string denoting the from field in the database.
	FieldFrom = "from"
	// FieldTo holds the string denoting the to field in the database.
	FieldTo = "to"
	// FieldDepartureDate holds the string denoting the departure_date field in the database.
	FieldDepartureDate = "departure_date"
	// FieldArrivalDate holds the string denoting the arrival_date field in the database.
	FieldArrivalDate = "arrival_date"
	// FieldAvailableFirstSlot holds the string denoting the available_first_slot field in the database.
	FieldAvailableFirstSlot = "available_first_slot"
	// FieldAvailableEconomySlot holds the string denoting the available_economy_slot field in the database.
	FieldAvailableEconomySlot = "available_economy_slot"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the flight in the database.
	Table = "flights"
)

// Columns holds all SQL columns for flight fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldFrom,
	FieldTo,
	FieldDepartureDate,
	FieldArrivalDate,
	FieldAvailableFirstSlot,
	FieldAvailableEconomySlot,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAvailableFirstSlot holds the default value on creation for the "available_first_slot" field.
	DefaultAvailableFirstSlot int
	// AvailableFirstSlotValidator is a validator for the "available_first_slot" field. It is called by the builders before save.
	AvailableFirstSlotValidator func(int) error
	// DefaultAvailableEconomySlot holds the default value on creation for the "available_economy_slot" field.
	DefaultAvailableEconomySlot int
	// AvailableEconomySlotValidator is a validator for the "available_economy_slot" field. It is called by the builders before save.
	AvailableEconomySlotValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusAvailable Status = "Available"
	StatusArrived   Status = "Arrived"
	StatusCancel    Status = "Cancel"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusAvailable, StatusArrived, StatusCancel:
		return nil
	default:
		return fmt.Errorf("flight: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Flight queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFrom orders the results by the from field.
func ByFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrom, opts...).ToFunc()
}

// ByTo orders the results by the to field.
func ByTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTo, opts...).ToFunc()
}

// ByDepartureDate orders the results by the departure_date field.
func ByDepartureDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartureDate, opts...).ToFunc()
}

// ByArrivalDate orders the results by the arrival_date field.
func ByArrivalDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArrivalDate, opts...).ToFunc()
}

// ByAvailableFirstSlot orders the results by the available_first_slot field.
func ByAvailableFirstSlot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvailableFirstSlot, opts...).ToFunc()
}

// ByAvailableEconomySlot orders the results by the available_economy_slot field.
func ByAvailableEconomySlot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvailableEconomySlot, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
