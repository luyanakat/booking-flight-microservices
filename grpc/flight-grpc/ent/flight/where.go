// Code generated by ent, DO NOT EDIT.

package flight

import (
	"mock-project/grpc/flight-grpc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldName, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldFrom, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldTo, v))
}

// DepartureDate applies equality check predicate on the "departure_date" field. It's identical to DepartureDateEQ.
func DepartureDate(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldDepartureDate, v))
}

// ArrivalDate applies equality check predicate on the "arrival_date" field. It's identical to ArrivalDateEQ.
func ArrivalDate(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldArrivalDate, v))
}

// AvailableFirstSlot applies equality check predicate on the "available_first_slot" field. It's identical to AvailableFirstSlotEQ.
func AvailableFirstSlot(v int) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldAvailableFirstSlot, v))
}

// AvailableEconomySlot applies equality check predicate on the "available_economy_slot" field. It's identical to AvailableEconomySlotEQ.
func AvailableEconomySlot(v int) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldAvailableEconomySlot, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContainsFold(FieldName, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasSuffix(FieldFrom, v))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContainsFold(FieldFrom, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldTo, v))
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContains(FieldTo, v))
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasPrefix(FieldTo, v))
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasSuffix(FieldTo, v))
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEqualFold(FieldTo, v))
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContainsFold(FieldTo, v))
}

// DepartureDateEQ applies the EQ predicate on the "departure_date" field.
func DepartureDateEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldDepartureDate, v))
}

// DepartureDateNEQ applies the NEQ predicate on the "departure_date" field.
func DepartureDateNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldDepartureDate, v))
}

// DepartureDateIn applies the In predicate on the "departure_date" field.
func DepartureDateIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldDepartureDate, vs...))
}

// DepartureDateNotIn applies the NotIn predicate on the "departure_date" field.
func DepartureDateNotIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldDepartureDate, vs...))
}

// DepartureDateGT applies the GT predicate on the "departure_date" field.
func DepartureDateGT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldDepartureDate, v))
}

// DepartureDateGTE applies the GTE predicate on the "departure_date" field.
func DepartureDateGTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldDepartureDate, v))
}

// DepartureDateLT applies the LT predicate on the "departure_date" field.
func DepartureDateLT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldDepartureDate, v))
}

// DepartureDateLTE applies the LTE predicate on the "departure_date" field.
func DepartureDateLTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldDepartureDate, v))
}

// ArrivalDateEQ applies the EQ predicate on the "arrival_date" field.
func ArrivalDateEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldArrivalDate, v))
}

// ArrivalDateNEQ applies the NEQ predicate on the "arrival_date" field.
func ArrivalDateNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldArrivalDate, v))
}

// ArrivalDateIn applies the In predicate on the "arrival_date" field.
func ArrivalDateIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldArrivalDate, vs...))
}

// ArrivalDateNotIn applies the NotIn predicate on the "arrival_date" field.
func ArrivalDateNotIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldArrivalDate, vs...))
}

// ArrivalDateGT applies the GT predicate on the "arrival_date" field.
func ArrivalDateGT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldArrivalDate, v))
}

// ArrivalDateGTE applies the GTE predicate on the "arrival_date" field.
func ArrivalDateGTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldArrivalDate, v))
}

// ArrivalDateLT applies the LT predicate on the "arrival_date" field.
func ArrivalDateLT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldArrivalDate, v))
}

// ArrivalDateLTE applies the LTE predicate on the "arrival_date" field.
func ArrivalDateLTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldArrivalDate, v))
}

// AvailableFirstSlotEQ applies the EQ predicate on the "available_first_slot" field.
func AvailableFirstSlotEQ(v int) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldAvailableFirstSlot, v))
}

// AvailableFirstSlotNEQ applies the NEQ predicate on the "available_first_slot" field.
func AvailableFirstSlotNEQ(v int) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldAvailableFirstSlot, v))
}

// AvailableFirstSlotIn applies the In predicate on the "available_first_slot" field.
func AvailableFirstSlotIn(vs ...int) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldAvailableFirstSlot, vs...))
}

// AvailableFirstSlotNotIn applies the NotIn predicate on the "available_first_slot" field.
func AvailableFirstSlotNotIn(vs ...int) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldAvailableFirstSlot, vs...))
}

// AvailableFirstSlotGT applies the GT predicate on the "available_first_slot" field.
func AvailableFirstSlotGT(v int) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldAvailableFirstSlot, v))
}

// AvailableFirstSlotGTE applies the GTE predicate on the "available_first_slot" field.
func AvailableFirstSlotGTE(v int) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldAvailableFirstSlot, v))
}

// AvailableFirstSlotLT applies the LT predicate on the "available_first_slot" field.
func AvailableFirstSlotLT(v int) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldAvailableFirstSlot, v))
}

// AvailableFirstSlotLTE applies the LTE predicate on the "available_first_slot" field.
func AvailableFirstSlotLTE(v int) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldAvailableFirstSlot, v))
}

// AvailableEconomySlotEQ applies the EQ predicate on the "available_economy_slot" field.
func AvailableEconomySlotEQ(v int) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldAvailableEconomySlot, v))
}

// AvailableEconomySlotNEQ applies the NEQ predicate on the "available_economy_slot" field.
func AvailableEconomySlotNEQ(v int) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldAvailableEconomySlot, v))
}

// AvailableEconomySlotIn applies the In predicate on the "available_economy_slot" field.
func AvailableEconomySlotIn(vs ...int) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldAvailableEconomySlot, vs...))
}

// AvailableEconomySlotNotIn applies the NotIn predicate on the "available_economy_slot" field.
func AvailableEconomySlotNotIn(vs ...int) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldAvailableEconomySlot, vs...))
}

// AvailableEconomySlotGT applies the GT predicate on the "available_economy_slot" field.
func AvailableEconomySlotGT(v int) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldAvailableEconomySlot, v))
}

// AvailableEconomySlotGTE applies the GTE predicate on the "available_economy_slot" field.
func AvailableEconomySlotGTE(v int) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldAvailableEconomySlot, v))
}

// AvailableEconomySlotLT applies the LT predicate on the "available_economy_slot" field.
func AvailableEconomySlotLT(v int) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldAvailableEconomySlot, v))
}

// AvailableEconomySlotLTE applies the LTE predicate on the "available_economy_slot" field.
func AvailableEconomySlotLTE(v int) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldAvailableEconomySlot, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Flight) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Flight) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Flight) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		p(s.Not())
	})
}
