// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mock-project/grpc/flight-grpc/ent/flight"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FlightCreate is the builder for creating a Flight entity.
type FlightCreate struct {
	config
	mutation *FlightMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (fc *FlightCreate) SetName(s string) *FlightCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetFrom sets the "from" field.
func (fc *FlightCreate) SetFrom(s string) *FlightCreate {
	fc.mutation.SetFrom(s)
	return fc
}

// SetTo sets the "to" field.
func (fc *FlightCreate) SetTo(s string) *FlightCreate {
	fc.mutation.SetTo(s)
	return fc
}

// SetDepartureDate sets the "departure_date" field.
func (fc *FlightCreate) SetDepartureDate(t time.Time) *FlightCreate {
	fc.mutation.SetDepartureDate(t)
	return fc
}

// SetArrivalDate sets the "arrival_date" field.
func (fc *FlightCreate) SetArrivalDate(t time.Time) *FlightCreate {
	fc.mutation.SetArrivalDate(t)
	return fc
}

// SetAvailableFirstSlot sets the "available_first_slot" field.
func (fc *FlightCreate) SetAvailableFirstSlot(i int) *FlightCreate {
	fc.mutation.SetAvailableFirstSlot(i)
	return fc
}

// SetNillableAvailableFirstSlot sets the "available_first_slot" field if the given value is not nil.
func (fc *FlightCreate) SetNillableAvailableFirstSlot(i *int) *FlightCreate {
	if i != nil {
		fc.SetAvailableFirstSlot(*i)
	}
	return fc
}

// SetAvailableEconomySlot sets the "available_economy_slot" field.
func (fc *FlightCreate) SetAvailableEconomySlot(i int) *FlightCreate {
	fc.mutation.SetAvailableEconomySlot(i)
	return fc
}

// SetNillableAvailableEconomySlot sets the "available_economy_slot" field if the given value is not nil.
func (fc *FlightCreate) SetNillableAvailableEconomySlot(i *int) *FlightCreate {
	if i != nil {
		fc.SetAvailableEconomySlot(*i)
	}
	return fc
}

// SetStatus sets the "status" field.
func (fc *FlightCreate) SetStatus(f flight.Status) *FlightCreate {
	fc.mutation.SetStatus(f)
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FlightCreate) SetCreatedAt(t time.Time) *FlightCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FlightCreate) SetNillableCreatedAt(t *time.Time) *FlightCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FlightCreate) SetUpdatedAt(t time.Time) *FlightCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FlightCreate) SetNillableUpdatedAt(t *time.Time) *FlightCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FlightCreate) SetID(i int64) *FlightCreate {
	fc.mutation.SetID(i)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FlightCreate) SetNillableID(i *int64) *FlightCreate {
	if i != nil {
		fc.SetID(*i)
	}
	return fc
}

// Mutation returns the FlightMutation object of the builder.
func (fc *FlightCreate) Mutation() *FlightMutation {
	return fc.mutation
}

// Save creates the Flight in the database.
func (fc *FlightCreate) Save(ctx context.Context) (*Flight, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FlightCreate) SaveX(ctx context.Context) *Flight {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FlightCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FlightCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FlightCreate) defaults() {
	if _, ok := fc.mutation.AvailableFirstSlot(); !ok {
		v := flight.DefaultAvailableFirstSlot
		fc.mutation.SetAvailableFirstSlot(v)
	}
	if _, ok := fc.mutation.AvailableEconomySlot(); !ok {
		v := flight.DefaultAvailableEconomySlot
		fc.mutation.SetAvailableEconomySlot(v)
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := flight.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := flight.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		v := flight.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FlightCreate) check() error {
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Flight.name"`)}
	}
	if _, ok := fc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "Flight.from"`)}
	}
	if _, ok := fc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "Flight.to"`)}
	}
	if _, ok := fc.mutation.DepartureDate(); !ok {
		return &ValidationError{Name: "departure_date", err: errors.New(`ent: missing required field "Flight.departure_date"`)}
	}
	if _, ok := fc.mutation.ArrivalDate(); !ok {
		return &ValidationError{Name: "arrival_date", err: errors.New(`ent: missing required field "Flight.arrival_date"`)}
	}
	if _, ok := fc.mutation.AvailableFirstSlot(); !ok {
		return &ValidationError{Name: "available_first_slot", err: errors.New(`ent: missing required field "Flight.available_first_slot"`)}
	}
	if v, ok := fc.mutation.AvailableFirstSlot(); ok {
		if err := flight.AvailableFirstSlotValidator(v); err != nil {
			return &ValidationError{Name: "available_first_slot", err: fmt.Errorf(`ent: validator failed for field "Flight.available_first_slot": %w`, err)}
		}
	}
	if _, ok := fc.mutation.AvailableEconomySlot(); !ok {
		return &ValidationError{Name: "available_economy_slot", err: errors.New(`ent: missing required field "Flight.available_economy_slot"`)}
	}
	if v, ok := fc.mutation.AvailableEconomySlot(); ok {
		if err := flight.AvailableEconomySlotValidator(v); err != nil {
			return &ValidationError{Name: "available_economy_slot", err: fmt.Errorf(`ent: validator failed for field "Flight.available_economy_slot": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Flight.status"`)}
	}
	if v, ok := fc.mutation.Status(); ok {
		if err := flight.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Flight.status": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Flight.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Flight.updated_at"`)}
	}
	return nil
}

func (fc *FlightCreate) sqlSave(ctx context.Context) (*Flight, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FlightCreate) createSpec() (*Flight, *sqlgraph.CreateSpec) {
	var (
		_node = &Flight{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(flight.Table, sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt64))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(flight.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.From(); ok {
		_spec.SetField(flight.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := fc.mutation.To(); ok {
		_spec.SetField(flight.FieldTo, field.TypeString, value)
		_node.To = value
	}
	if value, ok := fc.mutation.DepartureDate(); ok {
		_spec.SetField(flight.FieldDepartureDate, field.TypeTime, value)
		_node.DepartureDate = value
	}
	if value, ok := fc.mutation.ArrivalDate(); ok {
		_spec.SetField(flight.FieldArrivalDate, field.TypeTime, value)
		_node.ArrivalDate = value
	}
	if value, ok := fc.mutation.AvailableFirstSlot(); ok {
		_spec.SetField(flight.FieldAvailableFirstSlot, field.TypeInt, value)
		_node.AvailableFirstSlot = value
	}
	if value, ok := fc.mutation.AvailableEconomySlot(); ok {
		_spec.SetField(flight.FieldAvailableEconomySlot, field.TypeInt, value)
		_node.AvailableEconomySlot = value
	}
	if value, ok := fc.mutation.Status(); ok {
		_spec.SetField(flight.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(flight.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(flight.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// FlightCreateBulk is the builder for creating many Flight entities in bulk.
type FlightCreateBulk struct {
	config
	builders []*FlightCreate
}

// Save creates the Flight entities in the database.
func (fcb *FlightCreateBulk) Save(ctx context.Context) ([]*Flight, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Flight, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FlightCreateBulk) SaveX(ctx context.Context) []*Flight {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FlightCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FlightCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
