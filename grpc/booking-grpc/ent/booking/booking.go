// Code generated by ent, DO NOT EDIT.

package booking

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the booking type in the database.
	Label = "booking"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldFlightID holds the string denoting the flight_id field in the database.
	FieldFlightID = "flight_id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTicketID holds the string denoting the ticket_id field in the database.
	FieldTicketID = "ticket_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the booking in the database.
	Table = "bookings"
)

// Columns holds all SQL columns for booking fields.
var Columns = []string{
	FieldID,
	FieldCustomerID,
	FieldFlightID,
	FieldCode,
	FieldStatus,
	FieldTicketID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode func() string
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusScheduled Status = "Scheduled"
	StatusCancel    Status = "Cancel"
	StatusCompleted Status = "Completed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusScheduled, StatusCancel, StatusCompleted:
		return nil
	default:
		return fmt.Errorf("booking: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Booking queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByFlightID orders the results by the flight_id field.
func ByFlightID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlightID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTicketID orders the results by the ticket_id field.
func ByTicketID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTicketID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
