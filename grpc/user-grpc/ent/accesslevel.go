// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mock-project/grpc/user-grpc/ent/accesslevel"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AccessLevel is the model entity for the AccessLevel schema.
type AccessLevel struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccessLevel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accesslevel.FieldID:
			values[i] = new(sql.NullInt64)
		case accesslevel.FieldName:
			values[i] = new(sql.NullString)
		case accesslevel.FieldCreatedAt, accesslevel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccessLevel fields.
func (al *AccessLevel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accesslevel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int64(value.Int64)
		case accesslevel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				al.Name = value.String
			}
		case accesslevel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		case accesslevel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				al.UpdatedAt = value.Time
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccessLevel.
// This includes values selected through modifiers, order, etc.
func (al *AccessLevel) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AccessLevel.
// Note that you need to call AccessLevel.Unwrap() before calling this method if this AccessLevel
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AccessLevel) Update() *AccessLevelUpdateOne {
	return NewAccessLevelClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AccessLevel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AccessLevel) Unwrap() *AccessLevel {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccessLevel is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AccessLevel) String() string {
	var builder strings.Builder
	builder.WriteString("AccessLevel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("name=")
	builder.WriteString(al.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(al.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AccessLevels is a parsable slice of AccessLevel.
type AccessLevels []*AccessLevel
