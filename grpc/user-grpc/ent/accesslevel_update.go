// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mock-project/grpc/user-grpc/ent/accesslevel"
	"mock-project/grpc/user-grpc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccessLevelUpdate is the builder for updating AccessLevel entities.
type AccessLevelUpdate struct {
	config
	hooks    []Hook
	mutation *AccessLevelMutation
}

// Where appends a list predicates to the AccessLevelUpdate builder.
func (alu *AccessLevelUpdate) Where(ps ...predicate.AccessLevel) *AccessLevelUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetName sets the "name" field.
func (alu *AccessLevelUpdate) SetName(s string) *AccessLevelUpdate {
	alu.mutation.SetName(s)
	return alu
}

// SetCreatedAt sets the "created_at" field.
func (alu *AccessLevelUpdate) SetCreatedAt(t time.Time) *AccessLevelUpdate {
	alu.mutation.SetCreatedAt(t)
	return alu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alu *AccessLevelUpdate) SetNillableCreatedAt(t *time.Time) *AccessLevelUpdate {
	if t != nil {
		alu.SetCreatedAt(*t)
	}
	return alu
}

// SetUpdatedAt sets the "updated_at" field.
func (alu *AccessLevelUpdate) SetUpdatedAt(t time.Time) *AccessLevelUpdate {
	alu.mutation.SetUpdatedAt(t)
	return alu
}

// Mutation returns the AccessLevelMutation object of the builder.
func (alu *AccessLevelUpdate) Mutation() *AccessLevelMutation {
	return alu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AccessLevelUpdate) Save(ctx context.Context) (int, error) {
	alu.defaults()
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AccessLevelUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AccessLevelUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AccessLevelUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alu *AccessLevelUpdate) defaults() {
	if _, ok := alu.mutation.UpdatedAt(); !ok {
		v := accesslevel.UpdateDefaultUpdatedAt()
		alu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *AccessLevelUpdate) check() error {
	if v, ok := alu.mutation.Name(); ok {
		if err := accesslevel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AccessLevel.name": %w`, err)}
		}
	}
	return nil
}

func (alu *AccessLevelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := alu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(accesslevel.Table, accesslevel.Columns, sqlgraph.NewFieldSpec(accesslevel.FieldID, field.TypeInt64))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.Name(); ok {
		_spec.SetField(accesslevel.FieldName, field.TypeString, value)
	}
	if value, ok := alu.mutation.CreatedAt(); ok {
		_spec.SetField(accesslevel.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := alu.mutation.UpdatedAt(); ok {
		_spec.SetField(accesslevel.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesslevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AccessLevelUpdateOne is the builder for updating a single AccessLevel entity.
type AccessLevelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccessLevelMutation
}

// SetName sets the "name" field.
func (aluo *AccessLevelUpdateOne) SetName(s string) *AccessLevelUpdateOne {
	aluo.mutation.SetName(s)
	return aluo
}

// SetCreatedAt sets the "created_at" field.
func (aluo *AccessLevelUpdateOne) SetCreatedAt(t time.Time) *AccessLevelUpdateOne {
	aluo.mutation.SetCreatedAt(t)
	return aluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aluo *AccessLevelUpdateOne) SetNillableCreatedAt(t *time.Time) *AccessLevelUpdateOne {
	if t != nil {
		aluo.SetCreatedAt(*t)
	}
	return aluo
}

// SetUpdatedAt sets the "updated_at" field.
func (aluo *AccessLevelUpdateOne) SetUpdatedAt(t time.Time) *AccessLevelUpdateOne {
	aluo.mutation.SetUpdatedAt(t)
	return aluo
}

// Mutation returns the AccessLevelMutation object of the builder.
func (aluo *AccessLevelUpdateOne) Mutation() *AccessLevelMutation {
	return aluo.mutation
}

// Where appends a list predicates to the AccessLevelUpdate builder.
func (aluo *AccessLevelUpdateOne) Where(ps ...predicate.AccessLevel) *AccessLevelUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AccessLevelUpdateOne) Select(field string, fields ...string) *AccessLevelUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AccessLevel entity.
func (aluo *AccessLevelUpdateOne) Save(ctx context.Context) (*AccessLevel, error) {
	aluo.defaults()
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AccessLevelUpdateOne) SaveX(ctx context.Context) *AccessLevel {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AccessLevelUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AccessLevelUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aluo *AccessLevelUpdateOne) defaults() {
	if _, ok := aluo.mutation.UpdatedAt(); !ok {
		v := accesslevel.UpdateDefaultUpdatedAt()
		aluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *AccessLevelUpdateOne) check() error {
	if v, ok := aluo.mutation.Name(); ok {
		if err := accesslevel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AccessLevel.name": %w`, err)}
		}
	}
	return nil
}

func (aluo *AccessLevelUpdateOne) sqlSave(ctx context.Context) (_node *AccessLevel, err error) {
	if err := aluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accesslevel.Table, accesslevel.Columns, sqlgraph.NewFieldSpec(accesslevel.FieldID, field.TypeInt64))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccessLevel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accesslevel.FieldID)
		for _, f := range fields {
			if !accesslevel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accesslevel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.Name(); ok {
		_spec.SetField(accesslevel.FieldName, field.TypeString, value)
	}
	if value, ok := aluo.mutation.CreatedAt(); ok {
		_spec.SetField(accesslevel.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aluo.mutation.UpdatedAt(); ok {
		_spec.SetField(accesslevel.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &AccessLevel{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesslevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
