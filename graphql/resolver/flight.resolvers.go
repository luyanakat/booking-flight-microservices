package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"errors"
	"mock-project/graphql/graph"
	"mock-project/graphql/graph/model"
	"mock-project/helper"
	"mock-project/middleware"
	pb "mock-project/pb/proto"
	"net/http"
	"strconv"

	"github.com/jinzhu/copier"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// CreateFlight is the resolver for the createFlight field.
func (r *flightOpsResolver) CreateFlight(ctx context.Context, obj *model.FlightOps, input *model.CreateFlightInput) (*string, error) {
	user := middleware.GetUserFromContext(ctx)
	if user == nil {
		return nil, errors.New("access denied")
	}
	if !helper.CheckAdmin(user) {
		return nil, errors.New("access denied")
	}

	departureDateCon, _ := helper.ConvertTime(input.DepartureDate)
	arrivalDateCon, _ := helper.ConvertTime(input.ArrivalDate)

	req := &pb.Flight{}
	if err := copier.Copy(&req, input); err != nil {
		return nil, helper.GqlResponse(err.Error(), http.StatusInternalServerError)
	}
	req.DepartureDate = timestamppb.New(departureDateCon)
	req.ArrivalDate = timestamppb.New(arrivalDateCon)

	flight, err := r.flightClient.CreateFlight(ctx, req)
	if err != nil {
		return nil, err
	}
	id := strconv.Itoa(int(flight.Id))
	return &id, nil
}

// UpdateFlight is the resolver for the updateFlight field.
func (r *flightOpsResolver) UpdateFlight(ctx context.Context, obj *model.FlightOps, id int, input *model.UpdateFlightInput) (*string, error) {
	user := middleware.GetUserFromContext(ctx)
	if user == nil {
		return nil, helper.GqlResponse("access denied", http.StatusForbidden)
	}
	if !helper.CheckAdmin(user) {
		return nil, helper.GqlResponse("access denied", http.StatusForbidden)
	}

	departureDateCon, _ := helper.ConvertTime(*input.DepartureDate)
	arrivalDateCon, _ := helper.ConvertTime(*input.ArrivalDate)

	req := &pb.Flight{
		Id:                   int64(id),
		Name:                 *input.Name,
		DepartureDate:        timestamppb.New(departureDateCon),
		ArrivalDate:          timestamppb.New(arrivalDateCon),
		AvailableFirstSlot:   int64(*input.AvailableFirstSlot),
		AvailableEconomySlot: int64(*input.AvailableEconomySlot),
		Status:               *input.Status,
	}
	flight, err := r.flightClient.UpdateFlight(ctx, req)
	if err != nil {
		return nil, helper.GqlResponse(err.Error(), http.StatusInternalServerError)
	}
	idRes := strconv.Itoa(int(flight.Id))
	return &idRes, nil
}

// SearchFlights is the resolver for the searchFlights field.
func (r *flightQueryResolver) SearchFlights(ctx context.Context, obj *model.FlightQuery, page *int, limit *int, input *model.SearchFlightInput) (*model.SearchFlightResponse, error) {
	arrivalConV, _ := helper.ConvertTime(input.ArrivalDate)
	departureConV, _ := helper.ConvertTime(input.DepartureDate)

	req := &pb.SearchFlightRequest{
		Page:          int64(*page),
		Limit:         int64(*limit),
		From:          input.From,
		To:            input.To,
		DepartureDate: timestamppb.New(arrivalConV),
		ArrivalDate:   timestamppb.New(departureConV),
	}

	res, err := r.flightClient.SearchFlight(ctx, req)
	if err != nil {
		return nil, helper.GqlResponse(err.Error(), http.StatusInternalServerError)
	}

	// append protobuf response to GraphQL response
	var flightRes []*model.Flight
	for _, flight := range res.FlightList {
		flightQ := &model.Flight{}
		flightQ.ID = int(flight.Id)
		flightQ.Name = flight.Name
		flightQ.From = flight.From
		flightQ.To = flight.To
		flightQ.DepartureDate = flight.DepartureDate.AsTime()
		flightQ.ArrivalDate = flight.ArrivalDate.AsTime()
		flightQ.AvailableFirstSlot = int(flight.AvailableFirstSlot)
		flightQ.AvailableEconomySlot = int(flight.AvailableEconomySlot)
		flightQ.Status = flight.Status

		flightRes = append(flightRes, flightQ)
	}

	// GraphQL Response
	resQ := &model.SearchFlightResponse{
		Data:  flightRes,
		Page:  helper.GetIntPointer(int(res.Page)),
		Limit: limit,
		Total: helper.GetIntPointer(int(res.Total)),
	}
	return resQ, nil
}

// Flights is the resolver for the flights field.
func (r *flightQueryResolver) Flights(ctx context.Context, obj *model.FlightQuery, page *int, limit *int) (*model.CustomFlightResponse, error) {
	user := middleware.GetUserFromContext(ctx)

	if user == nil {
		return nil, helper.GqlResponse("access denied", http.StatusForbidden)
	}

	if !helper.CheckAdmin(user) {
		return nil, helper.GqlResponse("access denied", http.StatusForbidden)
	}

	req := &pb.ListFlightRequest{
		Page:  int64(*page),
		Limit: int64(*limit),
	}

	res, err := r.flightClient.ListFlight(ctx, req)
	if err != nil {
		return nil, helper.GqlResponse(err.Error(), http.StatusInternalServerError)
	}

	// append protobuf response to GraphQL response
	var flightRes []*model.Flight
	for _, flight := range res.FlightList {
		flightQ := &model.Flight{}
		flightQ.ID = int(flight.Id)
		flightQ.Name = flight.Name
		flightQ.From = flight.From
		flightQ.To = flight.To
		flightQ.DepartureDate = flight.DepartureDate.AsTime()
		flightQ.ArrivalDate = flight.ArrivalDate.AsTime()
		flightQ.AvailableFirstSlot = int(flight.AvailableFirstSlot)
		flightQ.AvailableEconomySlot = int(flight.AvailableEconomySlot)
		flightQ.Status = flight.Status
		flightQ.CreatedAt = helper.GetTimePointer(flight.CreatedAt.AsTime())
		flightQ.UpdatedAt = helper.GetTimePointer(flight.UpdatedAt.AsTime())

		flightRes = append(flightRes, flightQ)
	}

	// GraphQL Response
	resQ := model.CustomFlightResponse{
		Data:  flightRes,
		Page:  helper.GetIntPointer(int(res.Page)),
		Limit: limit,
		Total: helper.GetIntPointer(int(res.Total)),
	}
	return &resQ, nil
}

// Flight is the resolver for the Flight field.
func (r *mutationResolver) Flight(ctx context.Context) (*model.FlightOps, error) {
	return &model.FlightOps{}, nil
}

// Flight is the resolver for the Flight field.
func (r *queryResolver) Flight(ctx context.Context) (*model.FlightQuery, error) {
	return &model.FlightQuery{}, nil
}

// FlightOps returns graph.FlightOpsResolver implementation.
func (r *Resolver) FlightOps() graph.FlightOpsResolver { return &flightOpsResolver{r} }

// FlightQuery returns graph.FlightQueryResolver implementation.
func (r *Resolver) FlightQuery() graph.FlightQueryResolver { return &flightQueryResolver{r} }

type flightOpsResolver struct{ *Resolver }
type flightQueryResolver struct{ *Resolver }
