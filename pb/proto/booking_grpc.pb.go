// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/booking.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingManagerClient is the client API for BookingManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingManagerClient interface {
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*Booking, error)
	UpdateBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*Booking, error)
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*Booking, error)
	GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*Booking, error)
	UpdateBookingStatus(ctx context.Context, in *UpdateBookingStatusRequest, opts ...grpc.CallOption) (*UpdateBookingStatusResponse, error)
	ListBooking(ctx context.Context, in *ListBookingRequest, opts ...grpc.CallOption) (*ListBookingResponse, error)
	GetBookingHistory(ctx context.Context, in *GetBookingHistoryRequest, opts ...grpc.CallOption) (*GetBookingHistoryResponse, error)
}

type bookingManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingManagerClient(cc grpc.ClientConnInterface) BookingManagerClient {
	return &bookingManagerClient{cc}
}

func (c *bookingManagerClient) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*Booking, error) {
	out := new(Booking)
	err := c.cc.Invoke(ctx, "/grpc.BookingManager/CreateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingManagerClient) UpdateBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*Booking, error) {
	out := new(Booking)
	err := c.cc.Invoke(ctx, "/grpc.BookingManager/UpdateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingManagerClient) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*Booking, error) {
	out := new(Booking)
	err := c.cc.Invoke(ctx, "/grpc.BookingManager/CancelBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingManagerClient) GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*Booking, error) {
	out := new(Booking)
	err := c.cc.Invoke(ctx, "/grpc.BookingManager/GetBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingManagerClient) UpdateBookingStatus(ctx context.Context, in *UpdateBookingStatusRequest, opts ...grpc.CallOption) (*UpdateBookingStatusResponse, error) {
	out := new(UpdateBookingStatusResponse)
	err := c.cc.Invoke(ctx, "/grpc.BookingManager/UpdateBookingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingManagerClient) ListBooking(ctx context.Context, in *ListBookingRequest, opts ...grpc.CallOption) (*ListBookingResponse, error) {
	out := new(ListBookingResponse)
	err := c.cc.Invoke(ctx, "/grpc.BookingManager/ListBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingManagerClient) GetBookingHistory(ctx context.Context, in *GetBookingHistoryRequest, opts ...grpc.CallOption) (*GetBookingHistoryResponse, error) {
	out := new(GetBookingHistoryResponse)
	err := c.cc.Invoke(ctx, "/grpc.BookingManager/GetBookingHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingManagerServer is the server API for BookingManager service.
// All implementations must embed UnimplementedBookingManagerServer
// for forward compatibility
type BookingManagerServer interface {
	CreateBooking(context.Context, *CreateBookingRequest) (*Booking, error)
	UpdateBooking(context.Context, *Booking) (*Booking, error)
	CancelBooking(context.Context, *CancelBookingRequest) (*Booking, error)
	GetBooking(context.Context, *GetBookingRequest) (*Booking, error)
	UpdateBookingStatus(context.Context, *UpdateBookingStatusRequest) (*UpdateBookingStatusResponse, error)
	ListBooking(context.Context, *ListBookingRequest) (*ListBookingResponse, error)
	GetBookingHistory(context.Context, *GetBookingHistoryRequest) (*GetBookingHistoryResponse, error)
	mustEmbedUnimplementedBookingManagerServer()
}

// UnimplementedBookingManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBookingManagerServer struct {
}

func (UnimplementedBookingManagerServer) CreateBooking(context.Context, *CreateBookingRequest) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedBookingManagerServer) UpdateBooking(context.Context, *Booking) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBooking not implemented")
}
func (UnimplementedBookingManagerServer) CancelBooking(context.Context, *CancelBookingRequest) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedBookingManagerServer) GetBooking(context.Context, *GetBookingRequest) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooking not implemented")
}
func (UnimplementedBookingManagerServer) UpdateBookingStatus(context.Context, *UpdateBookingStatusRequest) (*UpdateBookingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookingStatus not implemented")
}
func (UnimplementedBookingManagerServer) ListBooking(context.Context, *ListBookingRequest) (*ListBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBooking not implemented")
}
func (UnimplementedBookingManagerServer) GetBookingHistory(context.Context, *GetBookingHistoryRequest) (*GetBookingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingHistory not implemented")
}
func (UnimplementedBookingManagerServer) mustEmbedUnimplementedBookingManagerServer() {}

// UnsafeBookingManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingManagerServer will
// result in compilation errors.
type UnsafeBookingManagerServer interface {
	mustEmbedUnimplementedBookingManagerServer()
}

func RegisterBookingManagerServer(s grpc.ServiceRegistrar, srv BookingManagerServer) {
	s.RegisterService(&BookingManager_ServiceDesc, srv)
}

func _BookingManager_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingManagerServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BookingManager/CreateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingManagerServer).CreateBooking(ctx, req.(*CreateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingManager_UpdateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingManagerServer).UpdateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BookingManager/UpdateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingManagerServer).UpdateBooking(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingManager_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingManagerServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BookingManager/CancelBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingManagerServer).CancelBooking(ctx, req.(*CancelBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingManager_GetBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingManagerServer).GetBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BookingManager/GetBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingManagerServer).GetBooking(ctx, req.(*GetBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingManager_UpdateBookingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingManagerServer).UpdateBookingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BookingManager/UpdateBookingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingManagerServer).UpdateBookingStatus(ctx, req.(*UpdateBookingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingManager_ListBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingManagerServer).ListBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BookingManager/ListBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingManagerServer).ListBooking(ctx, req.(*ListBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingManager_GetBookingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingManagerServer).GetBookingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BookingManager/GetBookingHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingManagerServer).GetBookingHistory(ctx, req.(*GetBookingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingManager_ServiceDesc is the grpc.ServiceDesc for BookingManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.BookingManager",
	HandlerType: (*BookingManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBooking",
			Handler:    _BookingManager_CreateBooking_Handler,
		},
		{
			MethodName: "UpdateBooking",
			Handler:    _BookingManager_UpdateBooking_Handler,
		},
		{
			MethodName: "CancelBooking",
			Handler:    _BookingManager_CancelBooking_Handler,
		},
		{
			MethodName: "GetBooking",
			Handler:    _BookingManager_GetBooking_Handler,
		},
		{
			MethodName: "UpdateBookingStatus",
			Handler:    _BookingManager_UpdateBookingStatus_Handler,
		},
		{
			MethodName: "ListBooking",
			Handler:    _BookingManager_ListBooking_Handler,
		},
		{
			MethodName: "GetBookingHistory",
			Handler:    _BookingManager_GetBookingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/booking.proto",
}
